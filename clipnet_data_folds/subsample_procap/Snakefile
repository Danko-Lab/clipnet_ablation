import json
import os
import pandas as pd

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Define master rule (forces Snakemake to generate all missing files)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

with open("../../data_spec/subsampling_spec.json", "r") as f:
    dirs = json.load(f)
    WORKDIR = dirs["WORKDIR"]
    DATADIR = dirs["DATADIR"]
    OUTDIR = dirs["OUTDIR"]
    FOLDS = 10

fold_assignments = "../data_fold_assignments.csv"

with open("../../data_spec/procap_to_1k_genomes.json", "r") as handle:
    prefix_converter = json.load(handle)
with open("../../data_spec/missing_1k_genomes.txt", "r") as handle:
    missing = handle.read().splitlines()

subsample_prefixes = list(
    pd.read_csv("../subsample_prefixes_n5_run2.txt", header=None)[0]
)
run_directory = os.path.join(OUTDIR, "subsample_data_folds_n5_run2")

output = expand(
    os.path.join(run_directory, "concat_procap_{fold}.npz"),
    fold=range(FOLDS),
)

####### /TODO


rule procap_all:  # A master rule that ensures all the other rules run
    input:
        output,
    params:
        os.path.join(WORKDIR, "procap_subsample"),
    shell:
        "rm -r {params}"


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Concatenate data between individuals
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


rule procap_concat:
    input:
        [
            os.path.join(
                DATADIR,
                "procap/individual_windows/%s.hs37d5.bwa.uniqueUMI.{pm}.{fold}.csv.gz"
                % prefix,
            )
            for prefix in subsample_prefixes
        ],
    resources:
        load=1,
    output:
        os.path.join(WORKDIR, "procap_subsample/concat/concat_{pm}_{fold}.csv.gz"),
    shell:
        "zcat {input} | gzip > {output}"


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Join pl and mn strand signal
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


rule procap_join_strands:
    input:
        pl=os.path.join(WORKDIR, "procap_subsample/concat/concat_pl_{fold}.csv.gz"),
        mn=os.path.join(WORKDIR, "procap_subsample/concat/concat_mn_{fold}.csv.gz"),
    resources:
        load=25,
    output:
        os.path.join(WORKDIR, "procap_subsample/final/concat_procap_{fold}.npz"),
    shell:
        "python ../../data_processing_scripts/join_signal.py {input} --in_csv {output}"


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Clean up scratch space
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


rule procap_move_back:
    input:
        os.path.join(WORKDIR, "procap_subsample/final/concat_procap_{tail}.npz"),
    resources:
        load=1,
    output:
        os.path.join(run_directory, "concat_procap_{tail}.npz"),
    shell:
        "cp {input} {output}"
